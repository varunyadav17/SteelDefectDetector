# -*- coding: utf-8 -*-
"""Steeldefecttest_FlaskWebServer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oqa9-pegmV3-mScoKcudEssti-OvlkX4
"""

import os
import shutil
import timedelta
from functools import update_wrapper
from keras.models import load_model
from keras.preprocessing.image import ImageDataGenerator
from flask import make_response, jsonify, current_app, Flask, flash, request, redirect, url_for, session
from werkzeug.utils import secure_filename
from gevent.pywsgi import WSGIServer
from flask_cors import CORS, cross_origin
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('Steel Defect Classifier')

UPLOAD_FOLDER = 'D:\Personal\SR\SteeldefecttestReact\steeldefecttest'
ALLOWED_EXTENSIONS = set(['png', 'jpg', 'jpeg', 'gif'])

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
CORS(app)

def crossdomain(origin=None, methods=None, headers=None, max_age=21600,
                attach_to_all=True, automatic_options=True):
    """Decorator function that allows crossdomain requests.
      Courtesy of
      https://blog.skyred.fi/articles/better-crossdomain-snippet-for-flask.html
    """
    if methods is not None:
        methods = ', '.join(sorted(x.upper() for x in methods))
    # use str instead of basestring if using Python 3.x
    if headers is not None and not isinstance(headers, list):
        headers = ', '.join(x.upper() for x in headers)
    # use str instead of basestring if using Python 3.x
    if not isinstance(origin, list):
        origin = ', '.join(origin)
    if isinstance(max_age, type(timedelta)):
        max_age = max_age.total_seconds()

    def get_methods():
        """ Determines which methods are allowed
        """
        if methods is not None:
            return methods

        options_resp = current_app.make_default_options_response()
        return options_resp.headers['allow']

    def decorator(f):
        """The decorator function
        """
        def wrapped_function(*args, **kwargs):
            """Caries out the actual cross domain code
            """
            if automatic_options and request.method == 'OPTIONS':
                resp = current_app.make_default_options_response()
            else:
                resp = make_response(f(*args, **kwargs))
            if not attach_to_all and request.method != 'OPTIONS':
                return resp

            h = resp.headers
            h['Access-Control-Allow-Origin'] = origin
            h['Access-Control-Allow-Methods'] = get_methods()
            h['Access-Control-Max-Age'] = str(max_age)
            h['Access-Control-Allow-Credentials'] = 'true'
            h['Access-Control-Allow-Headers'] = \
                "Origin, X-Requested-With, Content-Type, Accept, Authorization"
            if headers is not None:
                h['Access-Control-Allow-Headers'] = headers
            return resp

        f.provide_automatic_options = False
        return update_wrapper(wrapped_function, f)
    return decorator

@app.route('/prediction', methods=['POST', 'OPTIONS'])
@crossdomain(origin='*')
def fileUpload():
    #target=os.path.join(UPLOAD_FOLDER,'test_docs')
    #if not os.path.isdir(target):
     #   os.mkdir(target)
    print("Inside prediction")
    logger.info("Welcome to Steel Defect Detector`")
    file = request.files['file']
    logger.info(file)
    filename = secure_filename(file.filename)
    logger.info(filename)

    dst = 'Input/Unknown'
    #input_file = os.path.join(dst, 'input.jpg')
    #files = [file for file in os.listdir() if file.startswith('ISIC_')]
    #for i in range(len(files)):
    #if os.path.exists(input_file):
        #os.remove(input_file)
    #shutil.move(filename, input_file)

    files = os.listdir(dst)
    logger.info(files)
    for i in range(len(files)):
        logger.info("Removing files")
        os.remove(os.path.join(dst, files[i]))
    destination="/".join([dst, filename])
    logger.info(destination)
    file.save(destination)
    logger.info(destination)
    logger.info(file)
    session['uploadFilePath']=destination

    input_img = ImageDataGenerator(rescale = 1./255)
    input_img_generator = input_img.flow_from_directory('Input/', target_size = (32, 32), batch_size= 1, class_mode ='categorical', shuffle = True)
    y_img_batch, y_true_batch = input_img_generator[0]

    pred = model.predict(y_img_batch)
    pred = pred.argmax(axis = -1)

    response=("Normal") if pred[0] == 0 else ("Defective")
    logger.info(response)
    jsonResp = {'category': response}
    return jsonify(jsonResp)

def createInputDirs():
    if not os.path.exists('Input'):
      os.mkdir('Input')
      os.chdir('Input')
      os.mkdir('Unknown')
      os.chdir('..')

if __name__ == "__main__":
    model = load_model('model.h5')
    model.summary()
    createInputDirs()
    app.secret_key = os.urandom(24)
    app.debug = True
    #app.run(debug=True,host="0.0.0.0",port = 5000,use_reloader=False)
    http_server = WSGIServer(('0.0.0.0', 5000),app)
    http_server.serve_forever()

flask_cors.CORS(app, expose_headers='Authorization')
